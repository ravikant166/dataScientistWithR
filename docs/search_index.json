[["introduction-to-r.html", "Data Scientist with R Chapter 1 Introduction to R 1.1 Intro to Basics 1.2 Vectors 1.3 Matrices", " Data Scientist with R Ravikant Yadav 2023-03-23 Chapter 1 Introduction to R 1.1 Intro to Basics 1.1.1 Arithmetic with R In its most basic form, R can be used as a simple calculator. Consider the following arithmetic operators: Addition: + Subtraction: - Multiplication: * Division: / Exponentiation: ^ Modulo: %% The last two might need some explaining: The ^ operator raises the number to its left to the power of the number to its right: for example 3^2 is 9. The modulo returns the remainder of the division of the number to the left by the number on its right, for example 5 modulo 3 or 5 %% 3 is 2. With this knowledge, follow the instructions to complete the exercise. # An addition 5 + 5 ## [1] 10 # A subtraction 5 - 5 ## [1] 0 # A multiplication 3 * 5 ## [1] 15 # A division (5 + 5) / 2 ## [1] 5 # Exponentiation 2^5 ## [1] 32 # Modulo 28%%6 ## [1] 4 1.1.2 Variable assignment A basic concept in (statistical) programming is called a variable. A variable allows you to store a value (e.g. 4) or an object (e.g. a function description) in R. You can then later use this variables name to easily access the value or the object that is stored within this variable. You can assign a value 4 to a variable my_var with the command my_var &lt;- 4 Instructions Over to you: complete the code in the editor such that it assigns the value 42 to the variable x in the editor. Submit the answer. Notice that when you ask R to print x, the value 42 appears. # Assign the value 42 to x x &lt;- 42 # Print out the value of the variable x print(x) ## [1] 42 1.1.3 Variable assignment (2) Suppose you have a fruit basket with five apples. As a data analyst in training, you want to store the number of apples in a variable with the name my_apples. Instructions Type the following code in the editor: my_apples &lt;- 5. This will assign the value 5 to my_apples. Type: my_apples below the second comment. This will print out the value of my_apples. Submit your answer, and look at the output: you see that the number 5 is printed. So R now links the variable my_apples to the value 5. # Assign the value 5 to the variable my_apples my_apples &lt;- 5 # Print out the value of the variable my_apples my_apples ## [1] 5 1.1.4 Variable assignment (3) Every tasty fruit basket needs oranges, so you decide to add six oranges. As a data analyst, your reflex is to immediately create the variable my_oranges and assign the value 6 to it. Next, you want to calculate how many pieces of fruit you have in total. Since you have given meaningful names to these values, you can now code this in a clear way: my_apples + my_oranges Instructions Assign to my_oranges the value 6. Add the variables my_apples and my_oranges and have R simply print the result. Assign the result of adding my_apples and my_oranges to a new variable my_fruit. # Assign a value to the variables my_apples and my_oranges my_apples &lt;- 5 my_oranges &lt;- 6 # Add these two variables together my_apples + my_oranges ## [1] 11 # Create the variable my_fruit my_fruit &lt;- my_apples + my_oranges 1.1.5 Apples and oranges Common knowledge tells you not to add apples and oranges. But hey, that is what you just did, no :-)? The my_apples and my_oranges variables both contained a number in the previous exercise. The + operator works with numeric variables in R. If you really tried to add apples and oranges, and assigned a text value to the variable my_oranges (see the editor), you would be trying to assign the addition of a numeric and a character variable to the variable my_fruit. This is not possible. Instructions Submit the answer and read the error message. Make sure to understand why this did not work. Adjust the code so that R knows you have 6 oranges and thus a fruit basket with 11 pieces of fruit. # Assign a value to the variable my_apples my_apples &lt;- 5 # Fix the assignment of my_oranges my_oranges &lt;- 6 # Create the variable my_fruit and print it out my_fruit &lt;- my_apples + my_oranges my_fruit ## [1] 11 1.1.6 Basic data types in R R works with numerous data types. Some of the most basic types to get started are: Decimal values like 4.5 are called numerics. Whole numbers like 4 are called integers. Integers are also numerics. Boolean values (TRUE or FALSE) are called logical. Text (or string) values are called characters. Note how the quotation marks in the editor indicate that some text is a string Instructions Change the value of the: my_numeric variable to 42. my_character variable to universe. Note that the quotation marks indicate that universe is a character. my_logical variable to FALSE. Note that R is case sensitive! # Change my_numeric to be 42 my_numeric &lt;- 42 # Change my_character to be &quot;universe&quot; my_character &lt;- &quot;universe&quot; # Change my_logical to be FALSE my_logical &lt;- FALSE 1.1.7 Whats that data type? Do you remember that when you added 5 + \"six\", you got an error due to a mismatch in data types? You can avoid such embarrassing situations by checking the data type of a variable beforehand. You can do this with the class() function, as the code in the editor show Instructions Complete the code in the editor and also print out the classes of my_character and my_logical. # Declare variables of different types my_numeric &lt;- 42 my_character &lt;- &quot;universe&quot; my_logical &lt;- FALSE # Check class of my_numeric class(my_numeric) ## [1] &quot;numeric&quot; # Check class of my_character class(my_character) ## [1] &quot;character&quot; # Check class of my_logical class(my_logical) ## [1] &quot;logical&quot; 1.2 Vectors 1.2.1 Create a vector Feeling lucky? You better, because this chapter takes you on a trip to the City of Sins, also known as Statisticians Paradise! Thanks to R and your new data-analytical skills, you will learn how to uplift your performance at the tables and fire off your career as a professional gambler. This chapter will show how you can easily keep track of your betting progress and how you can do some simple analyses on past actions. Next stop, Vegas Baby VEGAS!! Instructions Do you still remember what you have learned in the first chapter? Assign the value \"Go!\" to the variable vegas. Remember: R is case sensitive! # Define the variable vegas vegas &lt;- &quot;Go!&quot; print(vegas) ## [1] &quot;Go!&quot; 1.2.2 Create a vector (2) Let us focus first! On your way from rags to riches, you will make extensive use of vectors. Vectors are one-dimension arrays that can hold numeric data, character data, or logical data. In other words, a vector is a simple tool to store data. For example, you can store your daily gains and losses in the casinos. In R, you create a vector with the combine function c(). You place the vector elements separated by a comma between the parentheses. For example: numeric_vector &lt;- c(1, 2, 3) character_vector &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) Once you have created these vectors in R, you can use them to do calculations. Instructions Complete the code such that boolean_vector contains the three elements: TRUE, FALSE and TRUE (in that order). numeric_vector &lt;- c(1, 10, 49) character_vector &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) # Complete the code for boolean_vector boolean_vector &lt;- c(TRUE, FALSE,TRUE) 1.2.3 Create a vector (3) After one week in Las Vegas and still zero Ferraris in your garage, you decide that it is time to start using your data analytical superpowers. Before doing a first analysis, you decide to first collect all the winnings and losses for the last week: For poker_vector: On Monday you won $140 Tuesday you lost $50 Wednesday you won $20 Thursday you lost $120 Friday you won $240 For roulette_vector: On Monday you lost $24 Tuesday you lost $50 Wednesday you won $100 Thursday you lost $350 Friday you won $10 You only played poker and roulette, since there was a delegation of mediums that occupied the craps tables. To be able to use this data in R, you decide to create the variables poker_vector and roulette_vector. Instructions Assign the winnings/losses for roulette to the variable roulette_vector. You lost $24, then lost $50, won $100, lost $350, and won $10. # Poker winnings from Monday to Friday poker_vector &lt;- c(140, -50, 20, -120, 240) print(poker_vector) ## [1] 140 -50 20 -120 240 # Roulette winnings from Monday to Friday roulette_vector &lt;- c(-24,-50,100,-350,10) print(roulette_vector) ## [1] -24 -50 100 -350 10 1.2.4 Naming a vector As a data analyst, it is important to have a clear view on the data that you are using. Understanding what each element refers to is therefore essential. In the previous exercise, we created a vector with your winnings over the week. Each vector element refers to a day of the week but it is hard to tell which element belongs to which day. It would be nice if you could show that in the vector itself. You can give a name to the elements of a vector with the names() function. Have a look at this example: some_vector &lt;- c(&quot;John Doe&quot;, &quot;poker player&quot;) names(some_vector) &lt;- c(&quot;Name&quot;, &quot;Profession&quot;) This code first creates a vector some_vector and then gives the two elements a name. The first element is assigned the name Name, while the second element is labeled Profession. Printing the contents to the console yields following output: Name Profession &quot;John Doe&quot; &quot;poker player Instructions The code in the editor names the elements in poker_vector with the days of the week. Add code to do the same thing for roulette_vector. # Poker winnings from Monday to Friday poker_vector &lt;- c(140, -50, 20, -120, 240) # Roulette winnings from Monday to Friday roulette_vector &lt;- c(-24, -50, 100, -350, 10) # Assign days as names of poker_vector names(poker_vector) &lt;- c(&quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;) # Assign days as names of roulette_vector names(roulette_vector) &lt;- c(&quot;Monday&quot;,&quot;Tuesday&quot;,&quot;Wednesday&quot;,&quot;Thursday&quot;,&quot;Friday&quot;) roulette_vector ## Monday Tuesday Wednesday Thursday Friday ## -24 -50 100 -350 10 1.2.5 Naming a vector (2) If you want to become a good statistician, you have to become lazy. (If you are already lazy, chances are high you are one of those exceptional, natural-born statistical talents.) In the previous exercises you probably experienced that it is boring and frustrating to type and retype information such as the days of the week. However, when you look at it from a higher perspective, there is a more efficient way to do this, namely, to assign the days of the week vector to a variable! Just like you did with your poker and roulette returns, you can also create a variable that contains the days of the week. This way you can use and re-use it. Instructions A variable days_vector that contains the days of the week has already been created for you. Use days_vector to set the names of poker_vector and roulette_vector. # Poker winnings from Monday to Friday poker_vector &lt;- c(140, -50, 20, -120, 240) # Roulette winnings from Monday to Friday roulette_vector &lt;- c(-24, -50, 100, -350, 10) # The variable days_vector days_vector &lt;- c(&quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;) # Assign the names of the day to roulette_vector and poker_vector names(poker_vector) &lt;- days_vector names(roulette_vector) &lt;- days_vector 1.2.6 Calculating total winnings Now that you have the poker and roulette winnings nicely as named vectors, you can start doing some data analytical magic. You want to find out the following type of information: How much has been your overall profit or loss per day of the week? Have you lost money over the week in total? Are you winning/losing money on poker or on roulette? To get the answers, you have to do arithmetic calculations on vectors. It is important to know that if you sum two vectors in R, it takes the element-wise sum. For example, the following three statements are completely equivalent: c(1, 2, 3) + c(4, 5, 6) c(1 + 4, 2 + 5, 3 + 6) c(5, 7, 9) You can also do the calculations with variables that represent vectors: a &lt;- c(1, 2, 3) b &lt;- c(4, 5, 6) c &lt;- a + b Instructions Take the sum of the variables A_vector and B_vector and assign it to total_vector. Inspect the result by printing out total_vector. A_vector &lt;- c(1, 2, 3) B_vector &lt;- c(4, 5, 6) # Take the sum of A_vector and B_vector total_vector &lt;- A_vector + B_vector # Print out total_vector total_vector ## [1] 5 7 9 1.2.7 Calculating total winnings (2) Now you understand how R does arithmetic with vectors, it is time to get those Ferraris in your garage! First, you need to understand what the overall profit or loss per day of the week was. The total daily profit is the sum of the profit/loss you realized on poker per day, and the profit/loss you realized on roulette per day. In R, this is just the sum of roulette_vector and poker_vector. Instructions Assign to the variable total_daily how much you won or lost on each day in total (poker and roulette combined). # Poker and roulette winnings from Monday to Friday: poker_vector &lt;- c(140, -50, 20, -120, 240) roulette_vector &lt;- c(-24, -50, 100, -350, 10) days_vector &lt;- c(&quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;) names(poker_vector) &lt;- days_vector names(roulette_vector) &lt;- days_vector # Assign to total_daily how much you won/lost on each day total_daily &lt;- poker_vector + roulette_vector 1.2.8 Calculating total winnings (3) Based on the previous analysis, it looks like you had a mix of good and bad days. This is not what your ego expected, and you wonder if there may be a very tiny chance you have lost money over the week in total? A function that helps you to answer this question is sum(). It calculates the sum of all elements of a vector. For example, to calculate the total amount of money you have lost/won with poker you do: total_poker &lt;- sum(poker_vector) Instructions Calculate the total amount of money that you have won/lost with roulette and assign to the variable total_roulette. Now that you have the totals for roulette and poker, you can easily calculate total_week (which is the sum of all gains and losses of the week). Print out total_week. # Poker and roulette winnings from Monday to Friday: poker_vector &lt;- c(140, -50, 20, -120, 240) roulette_vector &lt;- c(-24, -50, 100, -350, 10) days_vector &lt;- c(&quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;) names(poker_vector) &lt;- days_vector names(roulette_vector) &lt;- days_vector # Total winnings with poker total_poker &lt;- sum(poker_vector) # Total winnings with roulette total_roulette &lt;- sum(roulette_vector) # Total winnings overall total_week &lt;- total_poker + total_roulette # Print out total_week print(total_week) ## [1] -84 1.2.9 Comparing total winnings Oops, it seems like you are losing money. Time to rethink and adapt your strategy! This will require some deeper analysis After a short brainstorm in your hotels jacuzzi, you realize that a possible explanation might be that your skills in roulette are not as well developed as your skills in poker. So maybe your total gains in poker are higher (or &gt; ) than in roulette. Instructions Calculate total_poker and total_roulette as in the previous exercise. Use the sum() function twice. Check if your total gains in poker are higher than for roulette by using a comparison. Simply print out the result of this comparison. What do you conclude, should you focus on roulette or on poker? # Poker and roulette winnings from Monday to Friday: poker_vector &lt;- c(140, -50, 20, -120, 240) roulette_vector &lt;- c(-24, -50, 100, -350, 10) days_vector &lt;- c(&quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;) names(poker_vector) &lt;- days_vector names(roulette_vector) &lt;- days_vector # Calculate total gains for poker and roulette total_poker &lt;-sum(poker_vector) total_roulette &lt;- sum(roulette_vector) # Check if you realized higher total gains in poker than in roulette total_poker &gt; total_roulette ## [1] TRUE 1.2.10 Vector selection: the good times Your hunch seemed to be right. It appears that the poker game is more your cup of tea than roulette. Another possible route for investigation is your performance at the beginning of the working week compared to the end of it. You did have a couple of Margarita cocktails at the end of the week To answer that question, you only want to focus on a selection of the total_vector. In other words, our goal is to select specific elements of the vector. To select elements of a vector (and later matrices, data frames, ), you can use square brackets. Between the square brackets, you indicate what elements to select. For example, to select the first element of the vector, you type poker_vector[1]. To select the second element of the vector, you type poker_vector[2], etc. Notice that the first element in a vector has index 1, not 0 as in many other programming languages. Instructions Assign the poker results of Wednesday to the variable poker_wednesday. # Poker and roulette winnings from Monday to Friday: poker_vector &lt;- c(140, -50, 20, -120, 240) roulette_vector &lt;- c(-24, -50, 100, -350, 10) days_vector &lt;- c(&quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;) names(poker_vector) &lt;- days_vector names(roulette_vector) &lt;- days_vector # Define a new variable based on a selection poker_wednesday &lt;- poker_vector[3] 1.2.11 Vector selection: the good times (2) How about analyzing your midweek results? To select multiple elements from a vector, you can add square brackets at the end of it. You can indicate between the brackets what elements should be selected. For example: suppose you want to select the first and the fifth day of the week: use the vector c(1, 5) between the square brackets. For example, the code below selects the first and fifth element of poker_vector: poker_vector[c(1, 5)] Instructions Assign the poker results of Tuesday, Wednesday and Thursday to the variable poker_midweek. # Poker and roulette winnings from Monday to Friday: poker_vector &lt;- c(140, -50, 20, -120, 240) roulette_vector &lt;- c(-24, -50, 100, -350, 10) days_vector &lt;- c(&quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;) names(poker_vector) &lt;- days_vector names(roulette_vector) &lt;- days_vector # Define a new variable based on a selection poker_midweek &lt;- poker_vector[c(2,3,4)] 1.2.12 Vector selection: the good times (3) Selecting multiple elements of poker_vector with c(2, 3, 4) is not very convenient. Many statisticians are lazy people by nature, so they created an easier way to do this: c(2, 3, 4) can be abbreviated to2:4, which generates a vector with all natural numbers from 2 up to 4. So, another way to find the mid-week results is poker_vector[2:4]. Notice how the vector 2:4 is placed between the square brackets to select element 2 up to 4. Instructions Assign to roulette_selection_vector the roulette results from Tuesday up to Friday; make use of : if it makes things easier for you. # Poker and roulette winnings from Monday to Friday: poker_vector &lt;- c(140, -50, 20, -120, 240) roulette_vector &lt;- c(-24, -50, 100, -350, 10) days_vector &lt;- c(&quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;) names(poker_vector) &lt;- days_vector names(roulette_vector) &lt;- days_vector # Define a new variable based on a selection roulette_selection_vector &lt;- roulette_vector[2:5] print(roulette_selection_vector) ## Tuesday Wednesday Thursday Friday ## -50 100 -350 10 1.2.13 Vector selection: the good times (4) Another way to tackle the previous exercise is by using the names of the vector elements (Monday, Tuesday, ) instead of their numeric positions. For example, poker_vector[\"Monday\"] will select the first element of poker_vector since Monday is the name of that first element. Just like you did in the previous exercise with numerics, you can also use the element names to select multiple elements, for example: poker_vector[c(\"Monday\",\"Tuesday\")] Instructions Select the first three elements in poker_vector by using their names: Monday, Tuesday and Wednesday. Assign the result of the selection to poker_start. Calculate the average of the values in poker_start with the mean() function. Simply print out the result so you can inspect it. # Poker and roulette winnings from Monday to Friday: poker_vector &lt;- c(140, -50, 20, -120, 240) roulette_vector &lt;- c(-24, -50, 100, -350, 10) days_vector &lt;- c(&quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;) names(poker_vector) &lt;- days_vector names(roulette_vector) &lt;- days_vector # Select poker results for Monday, Tuesday and Wednesday poker_start &lt;- poker_vector[c(&quot;Monday&quot;,&quot;Tuesday&quot;,&quot;Wednesday&quot;)] # Calculate the average of the elements in poker_start mean(poker_start) ## [1] 36.66667 1.2.14 Selection by comparison - Step 1 By making use of comparison operators, we can approach the previous question in a more proactive way. The (logical) comparison operators known to R are: &lt; for less than for greater than &lt;= for less than or equal to = for greater than or equal to == for equal to each other != not equal to each other As seen in the previous chapter, stating 6 &gt; 5 returns TRUE. The nice thing about R is that you can use these comparison operators also on vectors. For example: c(4, 5, 6) &gt; 5 [1] FALSE FALSE TRUE This command tests for every element of the vector if the condition stated by the comparison operator is TRUE or FALSE Instructions Check which elements in poker_vector are positive (i.e. &gt; 0) and assign this to selection_vector. Print out selection_vector so you can inspect it. The printout tells you whether you won (TRUE) or lost (FALSE) any money for each day. # Poker and roulette winnings from Monday to Friday: poker_vector &lt;- c(140, -50, 20, -120, 240) roulette_vector &lt;- c(-24, -50, 100, -350, 10) days_vector &lt;- c(&quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;) names(poker_vector) &lt;- days_vector names(roulette_vector) &lt;- days_vector # Which days did you make money on poker? selection_vector &lt;- poker_vector &gt; 0 # Print out selection_vector print(selection_vector) ## Monday Tuesday Wednesday Thursday Friday ## TRUE FALSE TRUE FALSE TRUE 1.2.15 Selection by comparison - Step 2 Working with comparisons will make your data analytical life easier. Instead of selecting a subset of days to investigate yourself (like before), you can simply ask R to return only those days where you realized a positive return for poker. In the previous exercises you used selection_vector &lt;- poker_vector &gt; 0 to find the days on which you had a positive poker return. Now, you would like to know not only the days on which you won, but also how much you won on those days. You can select the desired elements, by putting selection_vector between the square brackets that follow poker_vector: poker_vector[selection_vector] R knows what to do when you pass a logical vector in square brackets: it will only select the elements that correspond to TRUE in selection_vector. Instructions Use selection_vector in square brackets to assign the amounts that you won on the profitable days to the variable poker_winning_days. # Poker and roulette winnings from Monday to Friday: poker_vector &lt;- c(140, -50, 20, -120, 240) roulette_vector &lt;- c(-24, -50, 100, -350, 10) days_vector &lt;- c(&quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;) names(poker_vector) &lt;- days_vector names(roulette_vector) &lt;- days_vector # Which days did you make money on poker? selection_vector &lt;- poker_vector &gt; 0 # Select from poker_vector these days poker_winning_days &lt;- poker_vector[selection_vector] 1.2.16 Advanced selection Just like you did for poker, you also want to know those days where you realized a positive return for roulette Instructions Create the variable selection_vector, this time to see if you made profit with roulette for different days. Assign the amounts that you made on the days that you ended positively for roulette to the variable roulette_winning_days. This vector thus contains the positive winnings of roulette_vector. # Poker and roulette winnings from Monday to Friday: poker_vector &lt;- c(140, -50, 20, -120, 240) roulette_vector &lt;- c(-24, -50, 100, -350, 10) days_vector &lt;- c(&quot;Monday&quot;, &quot;Tuesday&quot;, &quot;Wednesday&quot;, &quot;Thursday&quot;, &quot;Friday&quot;) names(poker_vector) &lt;- days_vector names(roulette_vector) &lt;- days_vector # Which days did you make money on roulette? selection_vector &lt;- roulette_vector &gt; 0 # Select from roulette_vector these days roulette_winning_days &lt;- roulette_vector[selection_vector] print(roulette_winning_days) ## Wednesday Friday ## 100 10 1.3 Matrices In this chapter, you will learn how to work with matrices in R. By the end of the chapter, you will be able to create matrices and understand how to do basic computations with them. You will analyze the box office numbers of the Star Wars movies and learn how to use matrices in R. May the force be with you! 1.3.1 Whats a matrix? In R, a matrix is a collection of elements of the same data type (numeric, character, or logical) arranged into a fixed number of rows and columns. Since you are only working with rows and columns, a matrix is called two-dimensional. You can construct a matrix in R with the matrix() function. Consider the following example: matrix(1:9, byrow = TRUE, nrow = 3) In the matrix() function: The first argument is the collection of elements that R will arrange into the rows and columns of the matrix. Here, we use 1:9 which is a shortcut for c(1, 2, 3, 4, 5, 6, 7, 8, 9). The argument byrow indicates that the matrix is filled by the rows. If we want the matrix to be filled by the columns, we just place byrow = FALSE. The third argument nrow indicates that the matrix should have three rows. Instructions Construct a matrix with 3 rows containing the numbers 1 up to 9, filled row-wise. # Construct a matrix with 3 rows that contain the numbers 1 up to 9 matrix(1:9, byrow=TRUE, nrow=3) ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 ## [3,] 7 8 9 1.3.2 Analyze matrices, you shall It is now time to get your hands dirty. In the following exercises you will analyze the box office numbers of the Star Wars franchise. May the force be with you! In the editor, three vectors are defined. Each one represents the box office numbers from the first three Star Wars movies. The first element of each vector indicates the US box office revenue, the second element refers to the Non-US box office (source: Wikipedia). In this exercise, youll combine all these figures into a single vector. Next, youll build a matrix from this vector. Instructions Use c(new_hope, empire_strikes, return_jedi) to combine the three vectors into one vector. Call this vector box_office. Construct a matrix with 3 rows, where each row represents a movie. Use the matrix() function to do this. The first argument is the vector box_office, containing all box office figures. Next, youll have to specify nrow = 3 and byrow = TRUE. Name the resulting matrix star_wars_matrix. # Box office Star Wars (in millions!) new_hope &lt;- c(460.998, 314.4) empire_strikes &lt;- c(290.475, 247.900) return_jedi &lt;- c(309.306, 165.8) # Create box_office box_office &lt;- c(new_hope,empire_strikes,return_jedi) print(box_office) ## [1] 460.998 314.400 290.475 247.900 309.306 165.800 # Construct star_wars_matrix star_wars_matrix &lt;- matrix(box_office, byrow= TRUE, nrow=3) print(star_wars_matrix) ## [,1] [,2] ## [1,] 460.998 314.4 ## [2,] 290.475 247.9 ## [3,] 309.306 165.8 1.3.3 Naming a matrix To help you remember what is stored in star_wars_matrix, you would like to add the names of the movies for the rows. Not only does this help you to read the data, but it is also useful to select certain elements from the matrix. Similar to vectors, you can add names for the rows and the columns of a matrix rownames(my_matrix) &lt;- row_names_vector colnames(my_matrix) &lt;- col_names_vector We went ahead and prepared two vectors for you: region, and titles. You will need these vectors to name the columns and rows of star_wars_matrix, respectively. Instructions Use colnames() to name the columns of star_wars_matrix with the region vector. Use rownames() to name the rows of star_wars_matrix with the titles vector. Print out star_wars_matrix to see the result of your work. # Box office Star Wars (in millions!) new_hope &lt;- c(460.998, 314.4) empire_strikes &lt;- c(290.475, 247.900) return_jedi &lt;- c(309.306, 165.8) # Construct matrix star_wars_matrix &lt;- matrix(c(new_hope, empire_strikes, return_jedi), nrow = 3, byrow = TRUE) # Vectors region and titles, used for naming region &lt;- c(&quot;US&quot;, &quot;non-US&quot;) titles &lt;- c(&quot;A New Hope&quot;, &quot;The Empire Strikes Back&quot;, &quot;Return of the Jedi&quot;) # Name the columns with region colnames(star_wars_matrix) &lt;- region # Name the rows with titles rownames(star_wars_matrix) &lt;- titles # Print out star_wars_matrix print(star_wars_matrix) ## US non-US ## A New Hope 460.998 314.4 ## The Empire Strikes Back 290.475 247.9 ## Return of the Jedi 309.306 165.8 1.3.4 Calculating the worldwide box office The single most important thing for a movie in order to become an instant legend in Tinseltown is its worldwide box office figures. To calculate the total box office revenue for the three Star Wars movies, you have to take the sum of the US revenue column and the non-US revenue column. In R, the function rowSums() conveniently calculates the totals for each row of a matrix. This function creates a new vector: rowSums(my_matrix) Instructions Calculate the worldwide box office figures for the three movies and put these in the vector named worldwide_vector. # Construct star_wars_matrix box_office &lt;- c(460.998, 314.4, 290.475, 247.900, 309.306, 165.8) region &lt;- c(&quot;US&quot;, &quot;non-US&quot;) titles &lt;- c(&quot;A New Hope&quot;, &quot;The Empire Strikes Back&quot;, &quot;Return of the Jedi&quot;) star_wars_matrix &lt;- matrix(box_office, nrow = 3, byrow = TRUE, dimnames = list(titles, region)) # Calculate worldwide box office figures worldwide_vector &lt;- rowSums(star_wars_matrix) print(worldwide_vector) ## A New Hope The Empire Strikes Back ## 775.398 538.375 ## Return of the Jedi ## 475.106 1.3.5 Adding a column for the Worldwide box office In the previous exercise you calculated the vector that contained the worldwide box office receipt for each of the three Star Wars movies. However, this vector is not yet part of star_wars_matrix. You can add a column or multiple columns to a matrix with the cbind() function, which merges matrices and/or vectors together by column. For example: big_matrix &lt;- cbind(matrix1, matrix2, vector1 ...) Instructions Add worldwide_vector as a new column to the star_wars_matrix and assign the result to all_wars_matrix. Use the cbind() function. # Construct star_wars_matrix box_office &lt;- c(460.998, 314.4, 290.475, 247.900, 309.306, 165.8) region &lt;- c(&quot;US&quot;, &quot;non-US&quot;) titles &lt;- c(&quot;A New Hope&quot;, &quot;The Empire Strikes Back&quot;, &quot;Return of the Jedi&quot;) star_wars_matrix &lt;- matrix(box_office, nrow = 3, byrow = TRUE, dimnames = list(titles, region)) # The worldwide box office figures worldwide_vector &lt;- rowSums(star_wars_matrix) # Bind the new variable worldwide_vector as a column to star_wars_matrix all_wars_matrix &lt;- cbind(star_wars_matrix,worldwide_vector) print(all_wars_matrix) ## US non-US worldwide_vector ## A New Hope 460.998 314.4 775.398 ## The Empire Strikes Back 290.475 247.9 538.375 ## Return of the Jedi 309.306 165.8 475.106 "]]
